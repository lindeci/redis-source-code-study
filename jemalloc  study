目前比较流行的c/c++代码来看，nginx，memcached，mysql等都有自己的内存管理模块，而redis使用的是第三方的内存管理模块je_malloc或tc_malloc，但虽然使用的是第三方的内存管理模块redis的性能依然是不错的。

jemalloc简介
jemalloc是有名的内存管理模块，可以替换libc的malloc，从而使得程序的性能得到提升。

wget https://github.com/jemalloc/jemalloc/releases/download/5.2.0/jemalloc-5.2.0.tar.bz2
tar xjvf jemalloc-5.2.0.tar.bz2
cd jemalloc-5.2.0/
./configure --with-jemalloc-prefix=je_
make

$ ls ./lib
libjemalloc.a  libjemalloc_pic.a  libjemalloc.so  libjemalloc.so.2
其中libjemalloc.a是静态库，
libjemalloc.so.2是动态库，这里我使用的是静态库

使用jemalloc
cd ../
mkdir testproject
mkdir ./testproject/lib
mkdir  ./testproject/include

cp jemalloc-5.2.0/include/jemalloc/jemalloc.h ./testproject/include
cp jemalloc-5.2.0/include/jemalloc/jemalloc_defs.h ./testproject/include
cp  libjemalloc.a ./testproject/lib
cd ./testproject

vi diymalloc.h
#ifndef _DIYMALLOC_H_
#define _DIYMALLOC_H_

#include <jemalloc.h>

//define to jemalloc
#define malloc(size) je_malloc(size)
#define calloc(count,size) je_calloc(count,size)
#define realloc(ptr,size) je_realloc(ptr,size)
#define free(ptr) je_free(ptr)

#endif



vi dtest.c
#include <stdio.h>
#include "diymalloc.h"

int main(void)
{
    char *pcon;

    pcon = malloc(10*sizeof(char));
    if (!pcon)
        fprintf(stderr, "malloc failed!\n");

	if (pcon != NULL) {
		free(pcon);
		pcon = NULL;
	}
    fprintf(stderr, "main end!\n");
    return 0;
}



vi  Makefile
CC=gcc
CFLAGS=-Wall -g
INCLUDES=-I ./include/
ALLOC_DEP=./lib/libjemalloc.a
ALLOC_LINK=$(ALLOC_DEP) -lpthread -ldl

dtest: dtest.o
        $(CC) $(INCLUDES) $(CFLAGS) -o dtest dtest.o $(ALLOC_LINK)

dtest.o: dtest.c $(ALLOC_DEP)
        $(CC) -c $(INCLUDES) $(CFLAGS) dtest.c

clean:
        rm -f dtest dtest.o
        


make

# gdb ./dtest
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-120.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /tmp/jemalloc-5.2.0/dtest...done.
(gdb) b main
Breakpoint 1 at 0x403235: file dtest.c, line 8.
(gdb) r
Starting program: /tmp/jemalloc-5.2.0/./dtest 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 1, main () at dtest.c:8
8           pcon = malloc(10*sizeof(char));
Missing separate debuginfos, use: debuginfo-install glibc-2.17-325.el7_9.x86_64
(gdb) s
je_malloc (size=10) at src/jemalloc.c:2253
2253            if (unlikely(!tsd || !tsd_fast(tsd) || (size > SC_LOOKUP_MAXCLASS))) {
(gdb) pwd
Working directory /tmp/jemalloc-5.2.0.
(gdb) n
2259 




malloc
  C  Dynamic memory management 
Defined in header <stdlib.h>
void* malloc( size_t size );
Allocates size bytes of uninitialized storage.

If allocation succeeds, returns a pointer that is suitably aligned for any object type with fundamental alignment.
If size is zero, the behavior of malloc is implementation-defined. For example, a null pointer may be returned. Alternatively, a non-null pointer may be returned; but such a pointer should not be dereferenced, and should be passed to free to avoid memory leaks.
malloc is thread-safe: it behaves as though only accessing the memory locations visible through its argument, and not any static storage.

A previous call to free or realloc that deallocates a region of memory synchronizes-with a call to malloc that allocates the same or a part of the same region of memory. This synchronization occurs after any access to the memory by the deallocating function and before any access to the memory by malloc. There is a single total order of all allocation and deallocation functions operating on each particular region of memory.


SIGALRM信号
signal(SIGALRM, alarmhandle); 表示给当前进程注册SIGALRM信号处理代码，如果收到SIGALRM信号，就会去执行alarmhandle函数

查看Linux支持的信号列表
# kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX

定时器itimerval
struct itimerval
{
    /* Value to put into `it_value' when the timer expires.  */
    struct timeval it_interval;
    /* Time to the next timer expiration.  */
    struct timeval it_value;
};

struct timeval
{
  __time_t tv_sec;		/* Seconds.  */
  __suseconds_t tv_usec;	/* Microseconds.  */
};

int setitimer (__itimer_which_t __which,
		      const struct itimerval *__restrict __new,
		      struct itimerval *__restrict __old)
which为定时器类型，setitimer支持3种类型的定时器：
ITIMER_REAL: 以系统真实的时间来计算，它送出SIGALRM信号。
ITIMER_VIRTUAL: -以该进程在用户态下花费的时间来计算，它送出SIGVTALRM信号。
ITIMER_PROF: 以该进程在用户态下和内核态下所费的时间来计算，它送出SIGPROF信号。



#include <stdio.h>
#include <time.h>
#include <sys/time.h>
#include <stdlib.h>
#include <signal.h>

static int i;
void signal_handler(int signam)
{
    i++;
    printf("catch signal num is :%d\n",signam);
    printf("i = %d\n",i);
}

void settimer()
{
    struct itimerval itv;
    //设置3s后开始定时
    itv.it_value.tv_sec = 3;
    itv.it_value.tv_usec = 0;
    //每1s
    itv.it_interval.tv_sec = 1;
    itv.it_interval.tv_usec = 0;

    setitimer(ITIMER_REAL,&itv,NULL);

    signal(SIGALRM,signal_handler);
}
int main()
{
    settimer();
    while (i < 2)
    {
        ;
    }
    return 0;
}






C++中的do{}while(0)
https://zhuanlan.zhihu.com/p/429150129
