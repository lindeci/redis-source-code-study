set a 123

dbAdd(redisDb * db, robj * key, robj * val) (\data\redis\src\db.c:189)
setKey(client * c, redisDb * db, robj * key, robj * val, int flags) (\data\redis\src\db.c:270)
setGenericCommand(client * c, int flags, robj * key, robj * val, robj * expire, int unit, robj * ok_reply, robj * abort_reply) (\data\redis\src\t_string.c:111)
setCommand(client * c) (\data\redis\src\t_string.c:302)
call(client * c, int flags) (\data\redis\src\server.c:3374)
processCommand(client * c) (\data\redis\src\server.c:4008)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)



hmset hmkey name ldc passwd ldc sex m age 18

sdsdup(const sds s) (\data\redis\src\sds.c:190)
dbAdd(redisDb * db, robj * key, robj * val) (\data\redis\src\db.c:189)
hashTypeLookupWriteOrCreate(client * c, robj * key) (\data\redis\src\t_hash.c:443)
hsetCommand(client * c) (\data\redis\src\t_hash.c:609)
call(client * c, int flags) (\data\redis\src\server.c:3374)
processCommand(client * c) (\data\redis\src\server.c:4008)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)


lpush lkey mysql redis

dbAdd(redisDb * db, robj * key, robj * val) (\data\redis\src\db.c:189)
pushGenericCommand(client * c, int where, int xx) (\data\redis\src\t_list.c:250)
lpushCommand(client * c) (\data\redis\src\t_list.c:267)
call(client * c, int flags) (\data\redis\src\server.c:3374)
processCommand(client * c) (\data\redis\src\server.c:4008)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)


sadd skey 123 test mysql hello

dbAdd(redisDb * db, robj * key, robj * val) (\data\redis\src\db.c:189)
saddCommand(client * c) (\data\redis\src\t_set.c:312)
call(client * c, int flags) (\data\redis\src\server.c:3374)
processCommand(client * c) (\data\redis\src\server.c:4008)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)

zadd zkey 91 she 92 he 93 me

dbAdd(redisDb * db, robj * key, robj * val) (\data\redis\src\db.c:189)
zaddGenericCommand(client * c, int flags) (\data\redis\src\t_zset.c:1754)
zaddCommand(client * c) (\data\redis\src\t_zset.c:1795)
call(client * c, int flags) (\data\redis\src\server.c:3374)
processCommand(client * c) (\data\redis\src\server.c:4008)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)



fork()
Negative Value: creation of a child process was unsuccessful.
Zero: Returned to the newly created child process.
Positive value: Returned to parent or caller. The value contains process ID of newly created child process.


RSS Resident Set Siz





siphash_nocase(const uint8_t * in, const size_t inlen, const uint8_t * k) (\data\redis\src\siphash.c:193)
dictGenCaseHashFunction(const unsigned char * buf, size_t len) (\data\redis\src\dict.c:91)
dictSdsCaseHash(const void * key) (\data\redis\src\server.c:290)
dictFind(dict * d, const void * key) (\data\redis\src\dict.c:521)
dictFetchValue(dict * d, const void * key) (\data\redis\src\dict.c:538)
lookupCommandLogic(dict * commands, robj ** argv, int argc, int strict) (\data\redis\src\server.c:3032)
lookupCommand(robj ** argv, int argc) (\data\redis\src\server.c:3048)
processCommand(client * c) (\data\redis\src\server.c:3697)
processCommandAndResetClient(client * c) (\data\redis\src\networking.c:2469)
processInputBuffer(client * c) (\data\redis\src\networking.c:2573)
readQueryFromClient(connection * conn) (\data\redis\src\networking.c:2709)
callHandler(connection * conn, ConnectionCallbackFunc handler) (\data\redis\src\connhelpers.h:79)
connSocketEventHandler(struct aeEventLoop * el, int fd, void * clientData, int mask) (\data\redis\src\connection.c:310)
aeProcessEvents(aeEventLoop * eventLoop, int flags) (\data\redis\src\ae.c:436)
aeMain(aeEventLoop * eventLoop) (\data\redis\src\ae.c:496)
main(int argc, char ** argv) (\data\redis\src\server.c:7156)



cat .vscode/tasks.json 
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build", 
            "type": "shell", 
            "command": "make",
            "args": [
                "CFLAGS=\"-g -O0\""
            ]
        }
    ]
}


cat .vscode/launch.json 
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        
        {
            "name": "redis",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/src/redis-server",
            "args": [
                "redis.conf"
            ],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "preLaunchTask": "build",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "description":  "Set Disassembly Flavor to Intel",
                    "text": "-gdb-set disassembly-flavor intel",
                    "ignoreFailures": true
                }
          ]
        }
    ]
}
